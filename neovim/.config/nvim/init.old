
" coc settings 
" Need to be in .vimrc to support both vim and neovim
let g:coc_user_config = {
\   'coc.preferences.formatOnSaveFiletypes': [
\     'css',
\     'markdown',
\     'javascript',
\     'javascriptreact',
\     'typescript',
\     'typescriptreact',
\     'json',
\     'graphql'
\   ],
\   'explorer.width': 40,
\   'explorer.file.column.git.showIgnored': v:true,
\   'explorer.file.showHiddenFiles': v:true,
\   'explorer.previewAction.onHover': v:true,
\   'explorer.icon.enableVimDevicons': v:true,
\   'explorer.keyMappings': {
\     '<cr>': ["expandable?", "expand", "open"],
\     'v': "open:vsplit"
\   },
\   'prettier.eslintIntegration': v:true,
\   'prettier.printWidth': 100
\ }

""" coc
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" CocRestart
nnoremap <leader>cr :CocRestart

" renaming.
nmap <leader>rn <Plug>(coc-rename)
nnoremap <leader>prn :CocSearch <C-R>=expand("<cword>")

""" prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>f :CocCommand prettier.formatFile<CR>
nmap <leader>f :CocCommand prettier.formatFile<CR>

""" explorer
nmap <leader>e :CocCommand explorer<CR>
nmap <leader>b :CocCommand explorer --position floating<CR>

""" fzf
nnoremap <C-p> :CocCommand fzf-preview.GitFiles<CR>
nnoremap <leader>p :CocCommand fzf-preview.DirectoryFiles<CR>
nnoremap <leader>ls :CocCommand fzf-preview.AllBuffers<CR>
nnoremap <leader>gs :CocCommand fzf-preview.GitStatus<CR>
nnoremap <leader>fd :CocCommand fzf-preview.CocDiagnostics <CR>

""" Rg
nnoremap <leader>pw :Rg <C-R>=expand("<cword>")<CR><CR>

augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
augroup END

""" Multiple cursor
nmap <expr> <silent> <C-d> <SID>select_current_word()
function! s:select_current_word()
  if !get(g:, 'coc_cursors_activated', 0)
    return "\<Plug>(coc-cursors-word)"
  endif
  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
endfunc

""" Maximizer
let g:maximizer_set_default_mapping = 0
nnoremap <leader>m :MaximizerToggle!<CR>

""" Vimspector

nnoremap <leader>dl :call vimspector#Launch()<CR>
nnoremap <leader>de :call vimspector#Reset()<CR>
nnoremap <leader>d<leader> :call vimspector#Continue()<CR>

nmap <leader>ds <Plug>VimspectorStop
nmap <leader>dr <Plug>VimspectorRestart
nmap <leader>dp <Plug>VimspectorPause
nmap <leader>db <Plug>VimspectorToggleBreakpoint
nmap <leader>dtcb <Plug>VimspectorToggleConditionalBreakpoint
nmap <leader>dfb <Plug>VimspectorAddFunctionBreakpoint
nmap <leader>do <Plug>VimspectorStepOver
nmap <leader>di <Plug>VimspectorStepInto
nmap <leader>da <Plug>VimspectorStepOut
nmap <leader>dmc <Plug>VimspectorRunToCursor

""" Edit init.vim
map <leader>v :vsp $MYVIMRC<CR>
